//@import "../../../../../../../node_modules/bootstrap/scss/functions";
//@import "../../../../../../../node_modules/bootstrap/scss/variables";
//@import "variables.bootstrap.scss";
//@import "../../../../../../../node_modules/bootstrap/scss/mixins";
//@import "../../../../../../../node_modules/bootstrap/scss/containers";
//
//@import "variables.plone.scss";

// scss-docs-start grid-breakpoints
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);
// scss-docs-end grid-breakpoints

// scss-docs-start container-max-widths
$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);
// scss-docs-end container-max-widths

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $max: map-get($breakpoints, $name);
  @return if($max and $max > 0, $max - .02, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  }

  @else {
    @content;
  }
}



.mosaic-grid-bg {
  position: absolute;
  background: #fff;
  width: 100%;
  height: 100%;
  z-index: 100;
  display: none;
}

.mosaic-grid-row {
  position: relative;
  --bs-gutter-x: 1.5rem;
  --bs-gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(var(--bs-gutter-y) * -1);
  margin-right: calc(var(--bs-gutter-x) / -2);
  margin-left: calc(var(--bs-gutter-x) / -2);
  > * {
    flex-shrink: 0;
    width: 100%;
    max-width: 100%;
    padding-right: calc(var(--bs-gutter-x) / 2);
    padding-left: calc(var(--bs-gutter-x) / 2);
    margin-top: var(--bs-gutter-y);
  }

}

body.template-layout,
body.mosaic-enabled {
  &.no-portlet-columns {
    .outer-wrapper > .container {
      // outline: 1px blue solid;
      max-width: unset;
      padding-left: unset;
      padding-right: unset;

      >.row {
        margin: 0;
        // --bs-gutter-x: 0;
        #portal-column-content {
          padding: 0;
        }
      }
      // @include make-container();

      .mosaic-grid-row {
        // outline: 1px solid green;
        //@include make-container();
        width: 100%;
        padding-right: var(--bs-gutter-x, 0.75rem);
        padding-left: var(--bs-gutter-x, 0.75rem);
        margin-right: auto;
        margin-left: auto;
        padding: 0;
        @each $breakpoint, $container-max-width in $container-max-widths {
          @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
                max-width: $container-max-width;
            }
        }

        @media (max-width: breakpoint-max('sm', $grid-breakpoints)) {
          .col-1,
          .col-2,
          .col-3,
          .col-4,
          .col-5,
          .col-6,
          .col-7,
          .col-8,
          .col-9,
          .col-10,
          .col-11,
          .col-12 {
            width: 100%;
          }
        }

        @media (max-width: breakpoint-max('md', $grid-breakpoints)) {
          .col-1,
          .col-2,
          .col-3,
          .col-4,
          .col-5,
          .col-6 {
            width: 50%;
          }

          .col-7,
          .col-8,
          .col-9,
          .col-10,
          .col-11,
          .col-12 {
            width: 100%;
          }
        }

        //@include make-grid-columns();
      }


      .mosaic-grid-row.mosaic-grid-row-fluid {
        max-width: unset;
        // outline: 1px dashed fuchsia;
        padding-left: unset;
        padding-right: unset;
        // @include make-row();
        margin-left: 0;
        margin-right: 0;
      }

    }
  }
}

// body.plone-toolbar-left-default,
// body.plone-toolbar-left-expanded {
//   &.no-portlet-columns {
//     .outer-wrapper > .container {
//       .mosaic-grid-row {
//         // @include make-container();
//       }
//     }
//   }
// }


